models_list <- list.files("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/",
full.names = TRUE)
for (i in models_list){
model <- readRDS(i)
varname <- tools::file_path_sans_ext(basename(i))
if (identical(class(model), "lm")){
values <- predict(object = model, newdata = data)
values <- ifelse(values < 0, 0, values)
values <- ifelse(values > 1, 1, values)
data[[varname]] <- values
} else if (identical(class(model), c("multinom", "nnet"))){
data[[varname]] <- predict(model, newdata = data,
type = "class")
}
message(paste0(which(models_list == i), " ", varname))
}
# Packages ----------------------------------------------------------------
library(dplyr)
library(nnet)
# Data --------------------------------------------------------------------
data <- readRDS("_SharedFolder_memoire-pot-growth/data/marts/sim_data/1_with_ivs.rds")
models_list <- list.files("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/",
full.names = TRUE)
i <- models_list[1]
i
varname
model <- readRDS(i)
varname <- tools::file_path_sans_ext(basename(i))
models_list
filename <- tools::file_path_sans_ext(basename(i))
filename <- tools::file_path_sans_ext(basename(i))
##### calculate attitude gaps for party
filename <- gsub("potential_for_growth_", "", filename)
filename <- gsub("vote_solidity_", "", filename)
filename <- tools::file_path_sans_ext(basename(i))
##### calculate attitude gaps for party
filename <- gsub("potential_for_growth_", "", filename)
party <- gsub("vote_solidity_", "", filename)
filename <- tools::file_path_sans_ext(basename(i))
grepl("potential_for_growth", filename)
filename <- tools::file_path_sans_ext(basename(i))
if (grepl("potential_for_growth", filename)){
party <- gsub("potential_for_growth_", "", filename)
model_type <- "potential_for_growth"
} else if (grepl("vote_solidity", filename)){
party <- gsub("vote_solidity_", "", filename)
model_type <- "vote_solidity"
}
factanal_object <- readRDS("_SharedFolder_memoire-pot-growth/data/warehouse/scales/factanal.rds")
factanal_object$loadings
scale_names <- c("souv_langfr", "libertarian", "woke", "laicite", "immigration", "lien3")
aggregated_issue_positions <- potgrowth::aggregate_party_positions("_SharedFolder_memoire-pot-growth/data/warehouse/party_positions/expert_surveys/",
colnames = potgrowth::qc_parties)
factanal_object <- readRDS("_SharedFolder_memoire-pot-growth/data/warehouse/scales/factanal.rds")
factanal_object$loadings
scale_names <- c("souv_langfr", "libertarian", "woke", "laicite", "immigration", "lien3")
party_scales <- potgrowth::compute_party_scales(aggregated_issue_positions = aggregated_issue_positions,
factanal_object = factanal_object,
scale_names = scale_names)
View(data)
data_gaps <- potgrowth::compute_attitude_gaps(party_scales_matrix = party_scales,
survey_data = data)
View(data_gaps)
values <- predict(object = model, newdata = data)
model$terms
attitudegap_variables <- attr(model$terms, "term.labels")
attr(model$terms, "term.labels")
attitudegap_columns_to_create <- paste0("attitudegap_scale_", scale_names)
attitudegap_columns_to_create
scale_names
if (grepl("potential_for_growth", filename)){
party <- gsub("potential_for_growth_", "", filename)
model_type <- "potential_for_growth"
} else if (grepl("vote_solidity", filename)){
party <- gsub("vote_solidity_", "", filename)
model_type <- "vote_solidity"
}
party
model_type
t <- sapply(scale_names,
FUN = function(x){
return(data[[paste0("attitudegap_scale_", x)]])
})
View(t)
t <- sapply(scale_names,
FUN = function(x){
return(data[[paste0("attitudegap_", party, "_scale_", x)]])
})
paste0("attitudegap_", party, "_scale_", x)
t <- sapply(scale_names,
FUN = function(x){
return(data_gaps[[paste0("attitudegap_", party, "_scale_", x)]])
})
gaps <- sapply(scale_names,
FUN = function(x){
return(data_gaps[[paste0("attitudegap_", party, "_scale_", x)]])
})
gaps <- sapply(scale_names,
FUN = function(x){
return(data_gaps[[paste0("attitudegap_", party, "_scale_", x)]])
})
names(gaps) <- paste0("attitudegap_scale_", names(gaps))
View(gaps)
gaps <- sapply(scale_names,
FUN = function(x){
return(data_gaps[[paste0("attitudegap_", party, "_scale_", x)]])
})
names(gaps) <- paste0("attitudegap_scale_", names(gaps))
gaps <- as.data.frame(sapply(scale_names,
FUN = function(x){
return(data_gaps[[paste0("attitudegap_", party, "_scale_", x)]])
}))
names(gaps) <- paste0("attitudegap_scale_", names(gaps))
datai <- cbind(data, gaps)
values <- predict(object = model, newdata = datai)
# Data --------------------------------------------------------------------
data <- readRDS("_SharedFolder_memoire-pot-growth/data/marts/sim_data/1_with_ivs.rds")
names(Data)
names(data)
# Packages ----------------------------------------------------------------
library(dplyr)
library(nnet)
# Data --------------------------------------------------------------------
data <- readRDS("_SharedFolder_memoire-pot-growth/data/warehouse/dimensions/census/provqc2022_5var/synthetic_poststrat_table.rds")
models_list <- c(list.files("_SharedFolder_memoire-pot-growth/data/marts/models/attitude_models",
recursive = TRUE, full.names = TRUE),
list.files("_SharedFolder_memoire-pot-growth/data/marts/models/reception_models",
recursive = TRUE, full.names = TRUE),
list.files("_SharedFolder_memoire-pot-growth/data/marts/models/static_attitudes_models/",
recursive = TRUE, full.names = TRUE))
models_list
# Packages ----------------------------------------------------------------
library(dplyr)
Data <- readRDS("_SharedFolder_memoire-pot-growth/data/warehouse/survey_data/with_adj_saliency.rds")
media_vars <- names(Data %>% select(starts_with("reception_polinfo")))
socialmedia_vars <- names(Data %>% select(starts_with("reception_socialmedia")))
ses <- c("granular", "age_cat", "educ", "income", "male", "lang")
howreach_model <- potgrowth::iv_model(
data = Data,
iv_to_predict = "reception_howreach",
ses = ses,
model_type = "multinom")
saveRDS(howreach_model,
"_SharedFolder_memoire-pot-growth/data/marts/models/reception_models/reception_howreach.rds")
# Packages ----------------------------------------------------------------
library(dplyr)
library(nnet)
# Data --------------------------------------------------------------------
data <- readRDS("_SharedFolder_memoire-pot-growth/data/warehouse/dimensions/census/provqc2022_5var/synthetic_poststrat_table.rds")
models_list <- c(list.files("_SharedFolder_memoire-pot-growth/data/marts/models/attitude_models",
recursive = TRUE, full.names = TRUE),
list.files("_SharedFolder_memoire-pot-growth/data/marts/models/reception_models",
recursive = TRUE, full.names = TRUE),
list.files("_SharedFolder_memoire-pot-growth/data/marts/models/static_attitudes_models/",
recursive = TRUE, full.names = TRUE))
for (i in models_list){
model <- readRDS(i)
varname <- tools::file_path_sans_ext(basename(i))
if (identical(class(model), "lm")){
values <- predict(object = model, newdata = data)
values <- ifelse(values < 0, 0, values)
values <- ifelse(values > 1, 1, values)
data[[varname]] <- values
} else if (identical(class(model), c("multinom", "nnet"))){
data[[varname]] <- predict(model, newdata = data,
type = "class")
}
message(paste0(which(models_list == i), " ", varname))
}
saveRDS(data, "_SharedFolder_memoire-pot-growth/data/marts/sim_data/1_with_ivs.rds")
# Data --------------------------------------------------------------------
data <- readRDS("_SharedFolder_memoire-pot-growth/data/marts/sim_data/1_with_ivs.rds")
# Compute attitude gaps ----------------------------------------------------
aggregated_issue_positions <- potgrowth::aggregate_party_positions("_SharedFolder_memoire-pot-growth/data/warehouse/party_positions/expert_surveys/",
colnames = potgrowth::qc_parties)
factanal_object <- readRDS("_SharedFolder_memoire-pot-growth/data/warehouse/scales/factanal.rds")
factanal_object$loadings
scale_names <- c("souv_langfr", "libertarian", "woke", "laicite", "immigration", "lien3")
party_scales <- potgrowth::compute_party_scales(aggregated_issue_positions = aggregated_issue_positions,
factanal_object = factanal_object,
scale_names = scale_names)
data_gaps <- potgrowth::compute_attitude_gaps(party_scales_matrix = party_scales,
survey_data = data)
models_list <- list.files("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/",
full.names = TRUE)
i <- models_list[1]
model <- readRDS(i)
filename <- tools::file_path_sans_ext(basename(i))
if (grepl("potential_for_growth", filename)){
party <- gsub("potential_for_growth_", "", filename)
model_type <- "potential_for_growth"
} else if (grepl("vote_solidity", filename)){
party <- gsub("vote_solidity_", "", filename)
model_type <- "vote_solidity"
}
gaps <- as.data.frame(sapply(scale_names,
FUN = function(x){
return(data_gaps[[paste0("attitudegap_", party, "_scale_", x)]])
}))
names(gaps) <- paste0("attitudegap_scale_", names(gaps))
gaps
datai <- cbind(data, gaps)
values <- predict(object = model, newdata = datai)
hist(values)
values <- predict(object = model, newdata = datai)
values <- ifelse(values < limits[1], limits[1], values)
if (grepl("potential_for_growth", filename)){
party <- gsub("potential_for_growth_", "", filename)
model_type <- "potential_for_growth"
limits <- c(-1, 0)
} else if (grepl("vote_solidity", filename)){
party <- gsub("vote_solidity_", "", filename)
model_type <- "vote_solidity"
limits <- c(0, 1)
}
gaps <- as.data.frame(sapply(scale_names,
FUN = function(x){
return(data_gaps[[paste0("attitudegap_", party, "_scale_", x)]])
}))
names(gaps) <- paste0("attitudegap_scale_", names(gaps))
datai <- cbind(data, gaps)
values <- predict(object = model, newdata = datai)
values <- ifelse(values < limits[1], limits[1], values)
values <- ifelse(values > limits[2], limits[2], values)
data_gaps[[paste0(model_type, "_", party)]] <- values
View(data_gaps)
models_list
i <- models_list[6]
model <- readRDS(i)
filename <- tools::file_path_sans_ext(basename(i))
##### calculate attitude gaps for all parties
data_gaps$test <- predict(model, newdata = data,
type = "class")
##### calculate attitude gaps for all parties
data_gaps$test <- predict(model, newdata = data_gaps,
type = "class")
##### calculate attitude gaps for all parties
voteints <- predict(model, newdata = data_gaps,
type = "probs")
View(voteints)
voteints <- as.data.frame(predict(model, newdata = data_gaps,
type = "probs"))
names(voteints) <- paste0("voteint_", names(voteints))
models_list <- list.files("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/",
full.names = TRUE)
for (i in models_list){
model <- readRDS(i)
filename <- tools::file_path_sans_ext(basename(i))
if (identical(class(model), "lm")){
if (grepl("potential_for_growth", filename)){
party <- gsub("potential_for_growth_", "", filename)
model_type <- "potential_for_growth"
limits <- c(-1, 0)
} else if (grepl("vote_solidity", filename)){
party <- gsub("vote_solidity_", "", filename)
model_type <- "vote_solidity"
limits <- c(0, 1)
}
gaps <- as.data.frame(sapply(scale_names,
FUN = function(x){
return(data_gaps[[paste0("attitudegap_", party, "_scale_", x)]])
}))
names(gaps) <- paste0("attitudegap_scale_", names(gaps))
datai <- cbind(data, gaps)
values <- predict(object = model, newdata = datai)
values <- ifelse(values < limits[1], limits[1], values)
values <- ifelse(values > limits[2], limits[2], values)
data_gaps[[paste0(model_type, "_", party)]] <- values
} else if (identical(class(model), c("multinom", "nnet"))){
voteints <- as.data.frame(predict(model, newdata = data_gaps,
type = "probs"))
names(voteints) <- paste0("voteint_", names(voteints))
}
message(paste0(which(models_list == i), " ", filename))
}
# Packages ----------------------------------------------------------------
library(dplyr)
library(nnet)
# Data --------------------------------------------------------------------
data <- readRDS("_SharedFolder_memoire-pot-growth/data/marts/sim_data/1_with_ivs.rds")
# Compute attitude gaps ----------------------------------------------------
aggregated_issue_positions <- potgrowth::aggregate_party_positions("_SharedFolder_memoire-pot-growth/data/warehouse/party_positions/expert_surveys/",
colnames = potgrowth::qc_parties)
factanal_object <- readRDS("_SharedFolder_memoire-pot-growth/data/warehouse/scales/factanal.rds")
factanal_object$loadings
scale_names <- c("souv_langfr", "libertarian", "woke", "laicite", "immigration", "lien3")
party_scales <- potgrowth::compute_party_scales(aggregated_issue_positions = aggregated_issue_positions,
factanal_object = factanal_object,
scale_names = scale_names)
data_gaps <- potgrowth::compute_attitude_gaps(party_scales_matrix = party_scales,
survey_data = data)
models_list <- list.files("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/",
full.names = TRUE)
for (i in models_list){
model <- readRDS(i)
filename <- tools::file_path_sans_ext(basename(i))
if (identical(class(model), "lm")){
if (grepl("potential_for_growth", filename)){
party <- gsub("potential_for_growth_", "", filename)
model_type <- "potential_for_growth"
limits <- c(-1, 0)
} else if (grepl("vote_solidity", filename)){
party <- gsub("vote_solidity_", "", filename)
model_type <- "vote_solidity"
limits <- c(0, 1)
}
gaps <- as.data.frame(sapply(scale_names,
FUN = function(x){
return(data_gaps[[paste0("attitudegap_", party, "_scale_", x)]])
}))
names(gaps) <- paste0("attitudegap_scale_", names(gaps))
datai <- cbind(data, gaps)
values <- predict(object = model, newdata = datai)
values <- ifelse(values < limits[1], limits[1], values)
values <- ifelse(values > limits[2], limits[2], values)
data_gaps[[paste0(model_type, "_", party)]] <- values
} else if (identical(class(model), c("multinom", "nnet"))){
voteints <- as.data.frame(predict(model, newdata = data_gaps,
type = "probs"))
names(voteints) <- paste0("voteint_", names(voteints))
cbind(data_gaps, voteints)
}
message(paste0(which(models_list == i), " ", filename))
}
View(data_gaps)
hist(data_gaps$vote_solidity_CAQ)
hist(data_gaps$vote_solidity_PCQ)
hist(data_gaps$vote_solidity_QS)
hist(data_gaps$potential_for_growth_PCQ)
hist(data_gaps$potential_for_growth_CAQ)
hist(data_gaps$potential_for_growth_PQ)
hist(data_gaps$potential_for_growth_QS)
hist(data_gaps$potential_for_growth_PLQ)
hist(data_gaps$vote_solidity_PQ)
data_long <- data_gaps %>%
pivot_longer(
cols = c(starts_with("potential_for_growth"), starts_with("vote_solidity")),
names_to = c(".value", "party"),
names_sep = "_",
names_pattern = "(.*)_(.*)"
)
data_long <- data_gaps %>%
tidyr::pivot_longer(
cols = c(starts_with("potential_for_growth"), starts_with("vote_solidity")),
names_to = c(".value", "party"),
names_sep = "_",
names_pattern = "(.*)_(.*)"
)
parties <- potgrowth::qc_parties
i <- "CAQ"
# Data --------------------------------------------------------------------
data <- readRDS("_SharedFolder_memoire-pot-growth/data/marts/sim_data/1_with_ivs.rds")
# Compute attitude gaps ----------------------------------------------------
aggregated_issue_positions <- potgrowth::aggregate_party_positions("_SharedFolder_memoire-pot-growth/data/warehouse/party_positions/expert_surveys/",
colnames = potgrowth::qc_parties)
factanal_object <- readRDS("_SharedFolder_memoire-pot-growth/data/warehouse/scales/factanal.rds")
factanal_object$loadings
scale_names <- c("souv_langfr", "libertarian", "woke", "laicite", "immigration", "lien3")
party_scales <- potgrowth::compute_party_scales(aggregated_issue_positions = aggregated_issue_positions,
factanal_object = factanal_object,
scale_names = scale_names)
data_gaps <- potgrowth::compute_attitude_gaps(party_scales_matrix = party_scales,
survey_data = data)
models_list <- list.files("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/",
full.names = TRUE)
parties <- potgrowth::qc_parties
potgrowth_model <- readRDS(paste0("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/potential_for_growth_", i, ".rds"))
i < "CAQ"
i <- "CAQ"
potgrowth_model <- readRDS(paste0("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/potential_for_growth_", i, ".rds"))
voteint_model <- readRDS("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/vote_int.rds")
voteints <- predict(voteint_model, newdata = data_gaps, type = "probs")
voteints["CAQ"]
View(voteints)
voteints[1,]
voteints <- t(predict(voteint_model, newdata = data_gaps, type = "probs"))
voteints["CAQ"]
voteints["CAQ",]
voteints <- predict(voteint_model, newdata = data_gaps, type = "probs")
voteints[,"CAQ"]
potential_for_growth_model <- readRDS(paste0("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/potential_for_growth_", i, ".rds"))
vote_solidity_model <- readRDS(paste0("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/vote_solidity_", i, ".rds"))
voteint_model <- readRDS("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/vote_int.rds")
voteints_matrix <- predict(voteint_model, newdata = data_gaps, type = "probs")
t <- voteints_matrix[,"CAQ"]
i <- 1
partyi <- parties[i]
partyi
datai <- data_gaps %>%
mutate(party = partyi,
voteint = voteints_matrix[, partyi])
rlang::last_trace()
datai <- data_gaps %>%
mutate(party = partyi,
voteint = unlist(voteints_matrix[, partyi]))
datai <- data_gaps %>%
ungroup() %>%
mutate(party = partyi,
voteint = unlist(voteints_matrix[, partyi]))
View(datai)
# Packages ----------------------------------------------------------------
library(dplyr)
library(nnet)
# Data --------------------------------------------------------------------
data <- readRDS("_SharedFolder_memoire-pot-growth/data/warehouse/dimensions/census/provqc2022_5var/synthetic_poststrat_table.rds")
View(data)
# Data --------------------------------------------------------------------
data <- readRDS("_SharedFolder_memoire-pot-growth/data/warehouse/dimensions/census/provqc2022_5var/synthetic_poststrat_table.rds") %>%
mutate(profil_id = 1:nrow(.)) %>%
relocate(profil_id)
# Data --------------------------------------------------------------------
data <- readRDS("_SharedFolder_memoire-pot-growth/data/warehouse/dimensions/census/provqc2022_5var/synthetic_poststrat_table.rds") %>%
ungroup() %>%
mutate(profil_id = 1:nrow(.)) %>%
relocate(profil_id)
View(data)
models_list <- c(list.files("_SharedFolder_memoire-pot-growth/data/marts/models/attitude_models",
recursive = TRUE, full.names = TRUE),
list.files("_SharedFolder_memoire-pot-growth/data/marts/models/reception_models",
recursive = TRUE, full.names = TRUE),
list.files("_SharedFolder_memoire-pot-growth/data/marts/models/static_attitudes_models/",
recursive = TRUE, full.names = TRUE))
for (i in models_list){
model <- readRDS(i)
varname <- tools::file_path_sans_ext(basename(i))
if (identical(class(model), "lm")){
values <- predict(object = model, newdata = data)
values <- ifelse(values < 0, 0, values)
values <- ifelse(values > 1, 1, values)
data[[varname]] <- values
} else if (identical(class(model), c("multinom", "nnet"))){
data[[varname]] <- predict(model, newdata = data,
type = "class")
}
message(paste0(which(models_list == i), " ", varname))
}
saveRDS(data, "_SharedFolder_memoire-pot-growth/data/marts/sim_data/1_with_ivs.rds")
# Data --------------------------------------------------------------------
data <- readRDS("_SharedFolder_memoire-pot-growth/data/marts/sim_data/1_with_ivs.rds")
# Compute attitude gaps ----------------------------------------------------
aggregated_issue_positions <- potgrowth::aggregate_party_positions("_SharedFolder_memoire-pot-growth/data/warehouse/party_positions/expert_surveys/",
colnames = potgrowth::qc_parties)
factanal_object <- readRDS("_SharedFolder_memoire-pot-growth/data/warehouse/scales/factanal.rds")
factanal_object$loadings
scale_names <- c("souv_langfr", "libertarian", "woke", "laicite", "immigration", "lien3")
party_scales <- potgrowth::compute_party_scales(aggregated_issue_positions = aggregated_issue_positions,
factanal_object = factanal_object,
scale_names = scale_names)
data_gaps <- potgrowth::compute_attitude_gaps(party_scales_matrix = party_scales,
survey_data = data)
models_list <- list.files("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/",
full.names = TRUE)
parties <- potgrowth::qc_parties
voteint_model <- readRDS("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/vote_int.rds")
voteints_matrix <- predict(voteint_model, newdata = data_gaps, type = "probs")
i <- 1
partyi <- parties[i]
partyi
datai <- data_gaps %>%
ungroup() %>%
mutate(party = partyi,
voteint = unlist(voteints_matrix[, partyi]))
View(datai)
potential_for_growth_model <- readRDS(paste0("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/potential_for_growth_", partyi, ".rds"))
vote_solidity_model <- readRDS(paste0("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/vote_solidity_", partyi, ".rds"))
gaps <- as.data.frame(sapply(scale_names,
FUN = function(x){
return(data_gaps[[paste0("attitudegap_", partyi, "_scale_", x)]])
}))
names(gaps) <- paste0("attitudegap_scale_", names(gaps))
newdatai <- cbind(datai, gaps)
potential_for_growth_values <- predict(object = potential_for_growth_model, newdata = newdatai)
potential_for_growth_values <- ifelse(values < -1, -1, potential_for_growth_values)
potential_for_growth_values <- ifelse(potential_for_growth_values < -1, -1, potential_for_growth_values)
datai$potential_for_growth <- potential_for_growth_values
vote_solidity_values <- predict(object = vote_solidity_model, newdata = newdatai)
vote_solidity_values <- ifelse(vote_solidity_values < 0, 0, vote_solidity_values)
vote_solidity_values <- ifelse(vote_solidity_values > 1, 1, vote_solidity_values)
datai$vote_solidity <- vote_solidity_values
for (i in 1:length(parties)){
partyi <- parties[i]
datai <- data_gaps %>%
ungroup() %>%
mutate(party = partyi,
voteint = unlist(voteints_matrix[, partyi]))
potential_for_growth_model <- readRDS(paste0("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/potential_for_growth_", partyi, ".rds"))
vote_solidity_model <- readRDS(paste0("_SharedFolder_memoire-pot-growth/data/marts/models/vote_models/vote_solidity_", partyi, ".rds"))
gaps <- as.data.frame(sapply(scale_names,
FUN = function(x){
return(data_gaps[[paste0("attitudegap_", partyi, "_scale_", x)]])
}))
names(gaps) <- paste0("attitudegap_scale_", names(gaps))
newdatai <- cbind(datai, gaps)
potential_for_growth_values <- predict(object = potential_for_growth_model, newdata = newdatai)
potential_for_growth_values <- ifelse(potential_for_growth_values < -1, -1, potential_for_growth_values)
potential_for_growth_values <- ifelse(potential_for_growth_values > 0, 0, potential_for_growth_values)
datai$potential_for_growth <- potential_for_growth_values
vote_solidity_values <- predict(object = vote_solidity_model, newdata = newdatai)
vote_solidity_values <- ifelse(vote_solidity_values < 0, 0, vote_solidity_values)
vote_solidity_values <- ifelse(vote_solidity_values > 1, 1, vote_solidity_values)
datai$vote_solidity <- vote_solidity_values
if (i == 1){
output_df <- datai
} else {
output_df <- rbind(output_df, datai)
}
message(partyi)
}
output_df <- output_df %>%
arrange(profil_id)
View(output_df)
saveRDS(output_df, "_SharedFolder_memoire-pot-growth/data/marts/sim_data/2_with_vote_variables.rds")
